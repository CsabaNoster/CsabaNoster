---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection, getEntryBySlug, type CollectionEntry } from 'astro:content';
import fs from 'node:fs';
import { fileURLToPath } from 'node:url';
import path from 'node:path';

export async function getStaticPaths() {
  const entries = await getCollection('design', (e: CollectionEntry<'design'>) => e.data.published !== false);
  return entries.map((entry: CollectionEntry<'design'>) => ({ params: { slug: entry.slug } }));
}

const slug = Astro.params.slug as string;
const entry = await getEntryBySlug('design', slug) as CollectionEntry<'design'> | undefined;
if (!entry) {
  throw new Error(`Design not found: ${slug}`);
}
const { Content } = await entry.render();

// Discover gallery images under /uploads/design/<slug>/
let gallery: string[] = [];
try {
  const du = new URL(`../../../public/uploads/design/${entry.slug}/`, import.meta.url);
  const dp = fileURLToPath(du);
  const items = fs.readdirSync(dp, { withFileTypes: true });
  gallery = items
    .filter((f) => f.isFile() && /\.(png|jpe?g|webp|avif|gif)$/i.test(f.name))
    .map((f) => ({
      web: `/uploads/design/${entry.slug}/${f.name}`,
      abs: fileURLToPath(new URL(`../../../public/uploads/design/${entry.slug}/${f.name}`, import.meta.url)),
    }))
    .filter((f) => {
      try { const st = fs.statSync(f.abs); return st.isFile() && st.size > 0; } catch { return false; }
    })
    .map((f) => f.web)
    .sort();
} catch {}

function fileOk(p?: string): boolean {
  if (!p) return false;
  try {
    const base = fileURLToPath(new URL(`../../../public/`, import.meta.url));
    const rel = (p.startsWith('/') ? p.slice(1) : p).replace(/\\/g, '/');
    const abs = path.join(base, rel);
    const st = fs.statSync(abs);
    return st.isFile() && st.size > 0;
  } catch { return false; }
}

// Prefer explicit frontmatter image if it exists; otherwise fall back to first gallery image
let heroSrc = fileOk((entry.data as any).image) ? (entry.data as any).image : (gallery[0] ?? undefined);
// Force Thresh Lantern detail page to use the exact requested photo when present
if (entry.slug === 'thresh-lantern-display') {
  const forced = '/uploads/design/thresh-lantern-display/1000007630 (1).jpg';
  if (fileOk(forced)) heroSrc = forced;
}

// Discover downloadable files under /public/downloads/design/<slug>/
let downloads: { name: string; web: string; abs: string }[] = [];
try {
  const dd = new URL(`../../../public/downloads/design/${entry.slug}/`, import.meta.url);
  const dp = fileURLToPath(dd);
  const items = fs.readdirSync(dp, { withFileTypes: true });
  downloads = items
    .filter((f) => f.isFile() && /\.(zip|step|stl|ini|ino|pdf|7z|rar|tar|gz|sldprt|sldasm)$/i.test(f.name))
    .map((f) => ({
      name: f.name,
      web: `/api/downloads/design/${entry.slug}/${encodeURIComponent(f.name)}`,
      abs: fileURLToPath(new URL(`../../../public/downloads/design/${entry.slug}/${f.name}`, import.meta.url)),
    }))
    .filter((f) => {
      try { const st = fs.statSync(f.abs); return st.isFile() && st.size > 0; } catch { return false; }
    });
} catch {}
---
<BaseLayout title={entry.data.title} description={entry.data.summary ?? '3D Design detail'} wrap={false}>
  <div class="main-window-layout">
    <div class="flex-1">
      <article class="prose prose-neutral dark:prose-invert max-w-none">
        <div class="hero-blade">
          <h1 class="hero-title">{entry.data.title}</h1>
          {entry.data.summary && <p class="hero-sub">{entry.data.summary}</p>}
        </div>
        {heroSrc && (
          <div class="rounded mb-6 mt-4 overflow-hidden bg-black/60 dark:bg-black/40">
            <img src={heroSrc} alt={entry.data.title} class="block mx-auto max-h-[420px] w-auto object-contain" />
          </div>
        )}

        <div class="block lg:hidden"><Content /></div>

        <section class="not-prose mt-4 mb-6 download-section">
          <h2 class="text-xl font-semibold mb-2">Download</h2>
          {downloads.length > 0 ? (
            downloads.map((d) => (
              <a class="steam-btn" href={d.web} data-href={d.web} download>
                <span class="steam-btn__plate">
                  <span class="screw tl" aria-hidden="true"></span>
                  <span class="screw tr" aria-hidden="true"></span>
                  <span class="screw bl" aria-hidden="true"></span>
                  <span class="screw br" aria-hidden="true"></span>
                  <span class="steam-btn__label" data-text={d.name}>{d.name}</span>
                </span>
              </a>
            ))
          ) : (
            <>
              <div class="mb-2 text-neutral-500">No downloadable files yet.</div>
              <a class="steam-btn" href="#" aria-disabled="true" style="opacity:0.6; cursor:not-allowed;">
                <span class="steam-btn__plate">
                  <span class="steam-btn__label" data-text="No files yet">No files yet</span>
                </span>
              </a>
            </>
          )}
        </section>

        {gallery.length > 0 && (
          <section class="not-prose mt-6">
            <h2 class="text-xl font-semibold mb-3">Gallery</h2>
            <ul class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
              {gallery.map((src) => (
                <li class="overflow-hidden rounded-lg border border-neutral-300 bg-white/90 dark:bg-neutral-900/90">
                  <button type="button" class="w-full aspect-[4/3] group" data-lb-src={src} aria-label="Open image">
                    <img src={src} alt={`${entry.data.title} image`} class="w-full h-40 object-cover object-center group-hover:opacity-90 transition" loading="lazy" />
                  </button>
                </li>
              ))}
            </ul>
            <div id="lightbox" class="fixed inset-0 z-[9999] hidden items-center justify-center bg-black/70 p-4" role="dialog" aria-modal="true" aria-label="Image viewer">
              <div class="max-w-5xl max-h-[85vh] relative">
                <button id="lightbox-close" class="absolute -top-3 -right-3 bg-white text-black rounded-full w-8 h-8 shadow" aria-label="Close">âœ•</button>
                <img id="lightbox-img" src="" alt="" class="w-auto h-auto max-w-full max-h-[85vh] rounded shadow-lg" />
              </div>
            </div>
            <script src="/js/lightbox.js"></script>
          </section>
        )}
      </article>
    </div>
    <aside class="hidden lg:block" style="align-self: flex-start; margin-top: 0;">
      <div class="details-panel" style="margin-top: 0;">
        <h2 class="details-title">Project Details</h2>
        {/* downloads moved to main window */}
        <div id="details-content"><Content /></div>
      </div>
    </aside>
  </div>
</BaseLayout>
<script is:inline>
  (function(){
    // Hide the downloads section for unauthenticated users
    (async function(){
      try {
        const res = await fetch('/api/auth/me', { credentials: 'same-origin' });
        const j = await res.json();
        if (!j.authenticated) {
          document.querySelectorAll('.download-section').forEach(s => s.style.display = 'none');
        }
      } catch (e) { /* ignore */ }
    })();

    // Intercept protected download clicks globally
    async function handleProtectedClick(e){
      const el = e.currentTarget;
      const href = el.getAttribute('data-href') || el.href;
      if (!href) return;
      if (href.includes('/login')) return;
      e.preventDefault();
      try {
        const res = await fetch(href, { credentials: 'same-origin' });
        if (res.status === 401) {
          const returnTo = encodeURIComponent(window.location.pathname + window.location.search);
          window.location.href = `/login?redirect=${returnTo}`;
          return;
        }
        if (!res.ok) { alert('Download failed'); return; }
        const blob = await res.blob();
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        const cd = res.headers.get('Content-Disposition') || '';
        const m = /filename="?([^";]+)"?/.exec(cd);
        a.download = m ? m[1] : href.split('/').pop() || 'download';
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      } catch (err) { console.error(err); alert('Network error'); }
    }
    document.querySelectorAll('a[data-href]').forEach(a => a.addEventListener('click', handleProtectedClick));
  })();
</script>
